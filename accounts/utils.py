import openpyxl
from django.http import HttpResponse
from openpyxl import styles
from openpyxl.utils import coordinate_from_string, column_index_from_string, get_column_letter


def excel_file_as_http_response(batch, department, month, rotations):
    output = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8'
    )
    file_name = "%s - %s - %s.xlsx" % (month.first_day().strftime('%B %Y'), department.name, batch.abbreviation)
    output['Content-Disposition'] = 'attachment; filename=' + file_name
    wb = openpyxl.Workbook()
    ws = wb.active
    title_range = "B2:F2"
    title_cell = "B2"
    subtitle_range = "B3:F3"
    subtitle_cell = "B3"
    stamp_cell = "F4"
    header_range = "B5:F5"
    data_start_row = 6
    data_end_row = data_start_row + rotations.count() - 1
    data_range = "B{}:F{}".format(data_start_row, data_end_row)
    full_range = "B2:F{}".format(data_end_row)
    extended_range = "A1:H{}".format(data_end_row + 2)
    ws.append([])
    ws.append(['', 'Intern List'])
    ws.append(['', 'Month: {} | Department: {} | Batch: {}'.format(
        month.first_day().strftime("%B %Y"),
        department.name,
        batch.name,
    )])
    ws.append(['' for _ in range(5)] + ['Generated by Easy Internship'])
    ws.append(['', "Name", "Student Number", "Badge Number", "Email", "Mobile Number"])
    ws.column_dimensions['B'].width = 45
    ws.column_dimensions['C'].width = 25
    ws.column_dimensions['D'].width = 20
    ws.column_dimensions['E'].width = 35
    ws.column_dimensions['F'].width = 25
    for rotation in rotations:
        ws.append(['',
                   rotation.internship.intern.profile.get_en_full_name(),
                   rotation.internship.intern.student_number,
                   rotation.internship.intern.badge_number,
                   rotation.internship.intern.profile.user.email,
                   rotation.internship.intern.mobile_number,
                   ])
    ws.merge_cells(title_range)
    ws.merge_cells(subtitle_range)
    black_border = styles.Border(
        left=styles.Side(border_style='thin', color="000000"),
        top=styles.Side(border_style='thin', color="000000"),
        right=styles.Side(border_style='thin', color="000000"),
        bottom=styles.Side(border_style='thin', color="000000"),
    )
    white_border = styles.Border(
        left=styles.Side(border_style='thin', color="FFFFFF"),
        top=styles.Side(border_style='thin', color="FFFFFF"),
        right=styles.Side(border_style='thin', color="FFFFFF"),
        bottom=styles.Side(border_style='thin', color="FFFFFF"),
    )
    extended_cells = ws[extended_range]
    for x, row in enumerate(extended_cells):
        for y, cell in enumerate(row):
            if cell == row[-1] and row == extended_cells[-1]:
                # This is the right-most, lower-most cell
                cell.border = styles.Border(
                    top=styles.Side(border_style='thin', color="FFFFFF"),
                    left=styles.Side(border_style='thin', color="FFFFFF"),
                    bottom=styles.Side(border_style=None),
                    right=styles.Side(border_style=None),
                )
            elif cell == row[-1]:
                # This is the right-most column
                cell.border = styles.Border(
                    top=styles.Side(border_style='thin', color="FFFFFF"),
                    bottom=styles.Side(border_style='thin', color="FFFFFF"),
                    left=styles.Side(border_style='thin', color="FFFFFF"),
                    right=styles.Side(border_style=None),
                )
            elif row == extended_cells[-1]:
                # This is the lower-most row
                cell.border = styles.Border(
                    top=styles.Side(border_style='thin', color="FFFFFF"),
                    left=styles.Side(border_style='thin', color="FFFFFF"),
                    right=styles.Side(border_style='thin', color="FFFFFF"),
                    bottom=styles.Side(border_style=None),
                )
            else:
                # All other cells
                cell.border = white_border

    def style_range(ws, cell_range, alignment=None, font=None, fill=None, border=None):
        """
        :param ws:  Excel worksheet instance
        :param range: An excel range to style (e.g. A1:F20)
        :param alignment: An openpyxl Alignment object
        :param font: An openpyxl Font object
        :param fill: An openpyxl Fill object
        :param border: An openpyxl Border object
        """

        start_cell, end_cell = cell_range.split(':')
        start_coord = coordinate_from_string(start_cell)
        start_row = start_coord[1]
        start_col = column_index_from_string(start_coord[0])
        end_coord = coordinate_from_string(end_cell)
        end_row = end_coord[1]
        end_col = column_index_from_string(end_coord[0])

        for row in range(start_row, end_row + 1):
            for col_idx in range(start_col, end_col + 1):
                col = get_column_letter(col_idx)
                if alignment:
                    ws.cell('%s%s' % (col, row)).alignment = alignment
                if font:
                    ws.cell('%s%s' % (col, row)).font = font
                if fill:
                    ws.cell('%s%s' % (col, row)).fill = fill
                if border:
                    ws.cell('%s%s' % (col, row)).border = border

    style_range(
        ws, title_range,
        alignment=styles.Alignment(horizontal='center', vertical='center'),
        font=styles.Font(b=True, size=24, color="FFFFFF"),
        fill=styles.PatternFill("solid", fgColor="214a7b"),
        border=black_border,
    )
    style_range(
        ws, subtitle_range,
        alignment=styles.Alignment(horizontal='center', vertical='center'),
        font=styles.Font(i=True, size=14),
        border=black_border,
    )
    stamp_cell = ws[stamp_cell]
    stamp_cell.font = styles.Font(i=True, u='single', color='0000FF')
    stamp_cell.alignment = styles.Alignment(horizontal='right')
    stamp_cell.hyperlink = "https://easyinternship.net"
    header_cells = ws[header_range]
    for row in header_cells:
        for cell in row:
            cell.font = styles.Font(b=True, size=16)
            cell.fill = styles.PatternFill('solid', fgColor='ddd9c5')
            cell.alignment = styles.Alignment(horizontal='center', vertical='center')
            cell.border = black_border
    data_cells = ws[data_range]
    for row in data_cells:
        for cell in row:
            cell.font = styles.Font(size=16)
            cell.border = black_border
    wb.save(output)
    return output